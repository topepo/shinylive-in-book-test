# Adding interactivity for teaching

For our book, I want to show the effects of hyperparameters on classification boundaries. In the past, we have done ggplot with faceting. That takes up a lot of space and is limited to 2-3 parameters. 

I'd like to embed a shiny app in a book and let users play around and assess the impacts. 

First, I installed the `shinylive` extension: 

```
shell> quarto add quarto-ext/shinylive
```

and also the corresponding R package: 

```
R> pak::pak("posit-dev/r-shinylive")
```

## Code to pre-compute grids

The idea is to make a regular grid of values and precompute predictions on a data grid. These values are filtered in the shiny app, and the decision boundary can be computed using a contour plot. 

We'll use tidymodels. First, let's load packages then simulate some data: 

```{r}
#| label: load-and-sim
#| message: false
#| warning: false

library(tidymodels)
library(shiny)

# ------------------------------------------------------------------------------

tidymodels_prefer()
theme_set(theme_bw())
options(pillar.advice = FALSE, pillar.min_title_chars = Inf)

# ------------------------------------------------------------------------------

f <- expr(-1 - 4 * A - 2 * B - 0.2 * A^2 + 1 * B^2)

set.seed(943)
sim_tr  <- sim_logistic(500, f)
sim_val <- sim_logistic(300, f)

## Make a data grid and get its ranges

size <- 100
x_seq <- seq(-4, 4, length.out = size)
pred_grid <- crossing(A = seq(-3, 3, length.out = size), B = x_seq)

rngs <- map(pred_grid, extendrange)
```

Let's try a logistic regression with spline terms for both predictors (equal degrees of freedom):

```{r}
#| label: spec-model
#| message: false
#| warning: false

model_spec <- logistic_reg()
model_rec <- 
  recipe(class ~ ., data = sim_tr) %>% 
  step_spline_b(A, B, deg_free = tune())
model_wflow <- workflow(model_rec, model_spec)
```

Now we will pre-compute the predictions for each model configuration: 

```{r}
#| label: grid
#| message: false
#| warning: false
param_grid <- tibble(deg_free = 3:8)

# This will produce predictions on the grid and save them and the original data
get_grid_pred <- function(x) {
  augment(x, new_data = pred_grid)
}

ctrl <- control_grid(extract = get_grid_pred)

grid_pred <- 
  model_wflow %>% 
  tune_grid(resamples = apparent(sim_tr), grid = param_grid, control = ctrl)

# pull out and format the predictions
grid_pred <- 
  collect_extracts(grid_pred) %>% 
  dplyr::select(deg_free, .extracts) %>% 
  unnest(.extracts) %>% 
  dplyr::select(-.pred_class, -.pred_two)

if (!exists("grid_pred.RData")) {
  save(grid_pred, file = "grid_pred.RData")
}

```

## shiny(live)!

Here are the results: 

```{shinylive-r}
#| label: fig-shiny-spline
#| fig-height: 7
#| standalone: true

ui <- fluidPage(
  
  fluidRow(
    column(1, 
           sliderInput(
             "deg_free", 
             label = "Spline degrees of freedom:",
             min = 3L, value = 3L, max = 8L, step = 1L
           )
    ),
    
    column(1, 
           plotOutput("spline_contours")
    )
  )
)

server <- function(input, output) {
  
  output$spline_contours <- 
    renderPlot({
      
      grid_file < tempfile()
      download.file(
        "https://raw.githubusercontent.com/topepo/shinylive-in-book-test/main/grid_pred.RData",
        destfile = grid_file)
      load(grid_file)
      
      preds <- dplyr::filter(grid_pred, deg_free == input$deg_free)
      
      p <- 
        preds %>% 
        ggplot(aes(A, B)) + 
        geom_point(data = sim_val, aes(col = class, pch = class), alpha = 1 / 2) +
        geom_contour(
          aes(z = .pred_one), 
          breaks = 1/ 2,
          col = "black"
        ) +
        lims(x = rngs$A, y = rngs$B)
      
      
      # test base R graphics
      # hist(preds$.pred_one)
      
      print(p)
      
    })
}

app <- shinyApp(ui = ui, server = server)
```


The shiny code [is very simple](https://github.com/topepo/shinylive-in-book-test/blob/ec04f975cd42ae578199d222550141e4f0fca8d9/intro.qmd#L101:L148). 

I'd like to be able to use these as Quarto figures (I used a figure-type chunk). 
