# shiny(live)!

The Quarto doc will contain the `shiny` app using a code chunk. The type of code chunk should be `{shinylive-r}` (as opposed to `{r}`). 

## yml options

The main requirement for the code chunk yml is the option `standalone: true`. 

For my application, I used the options: 

````yml
```{shinylive-r}
#| label: fig-shiny-spline
#| viewerHeight: 500
#| standalone: true
````

The `label` doesn't make it a figure as it normally would but see the section below for details regarding this (and details like captions, etc.). 

The standard `fig-height` (and width) options don't apply to `shiny` apps; `viewerHeight` is used instead.  

You also have to add a Quarto _filter_ in your `_quarto.yml` file: 

```yml
filters:
  - shinylive
```

There is a bit more to say about formatting the chunk for Quarto but we'll show that later. 

## Package declarations

In our chunk that contains the `shiny` app (i.e., `fig-shiny-spline` in this example), there are two ways that we can declare which packages should be downloaded into the webR framework: 

 - Use explicit `library()` commands. This will load the package in the app and declare that it should be installed.
 - Write a `DESCRIPTION` file. 
 
shinylive uses the `renv` package to manage packages, so refer to that documentation. 

```{r}
#| label: pkg-installs
#| eval: false

library("ggplot2")
library("htmltools")   #<- only needed to use SVG images 
```

The base installation of webR includes its own `webr` utility package, so don't worry about installing that. 

## User-interface function

The UI function is very simple and has no extra accouterments for shinylive


```{r}
#| label: ui-code
#| eval: false
ui <- fluidPage(
  
  fluidRow(
    column(8, 
           sliderInput(
             "deg_free", 
             label = "Spline degrees of freedom:",
             min = 3L, value = 3L, max = 8L, step = 1L
           )
    ),
    
    imageOutput("spline_contours", height = "400px")
  )
)
```

## The server function

This is where most of the customization happens. 

```{r}
#| eval: false
server <- function(input, output, session) {
  
  # ------------------------------------------------------------------------
  # Input data from remote locations on GitHub
  
  pred_path <-                                                             # <1>
    paste(                                                  
      "https://raw.githubusercontent.com",                  
      "topepo", "shinylive-in-book-test",                   
      "main", "predicted_values.RData",                     
      sep = "/"                                             
    )                                                       
  data_path <-                                              
    paste(                                                  
      "https://raw.githubusercontent.com",                  
      "topepo", "shinylive-in-book-test",                   
      "main", "sim_val.RData",                              
      sep = "/"                                             
    )                                                       
  
  rdata_file <- tempfile()                                                 # <2>
  download.file(pred_path, destfile = rdata_file)           
  load(rdata_file)                                          
  download.file(data_path, destfile = rdata_file)           
  load(rdata_file)                                          
  
  # Set some ranges for the plot
  rngs <- list(A = c(-3.3, 3.3), B = c(-4.4, 4.4))
  
  output$spline_contours <-
    renderImage({
      
      preds <- predicted_values[predicted_values$deg_free == input$deg_free,]
      
      p <-
        ggplot(preds, aes(A, B)) +
        # Plot the validation set
        geom_point(
          data = sim_val, 
          aes(col = class, pch = class), 
          alpha = 1 / 2,
          cex = 3
        ) +
        # Show the class boundary
        geom_contour(
          aes(z = .pred_one),
          breaks = 1 / 2,
          linewidth = 3 / 2,
          col = "black"
        ) +
        # Formatting
        lims(x = rngs$A, y = rngs$B) +
        theme_bw() + 
        theme(legend.position = "top")
      
      file <-                                                              # <3>
        htmltools::capturePlot(
          print(p), 
          tempfile(fileext = ".svg"),
          grDevices::svg,
          width = 4, 
          height = 4
        )
      list(src = file)
    }, 
    deleteFile = TRUE)                                                    # <4>
}

app <- shinyApp(ui = ui, server = server)
```

1. This block sets up URLs pointing to the GitHub raw objects. 
2. Both data sets are downloaded to a temporary file and loaded into the session. 
3. Code allowing us to save the visualization as an SVG image. This is an aesthetic choice and unrelated to the point of this repo.
4. Clean up the SVG file passed between the server and UI. 


## The results

Our beautiful `shiny` app!

::: {#fig-shiny-spline}

::: {.figure-content}

```{shinylive-r}
#| label: fig-shiny-spline
#| viewerHeight: 505
#| standalone: true
library("ggplot2")
library("htmltools")

library(ggplot2)
library(htmltools)

ui <- fluidPage(
  
  fluidRow(
    column(8, 
           sliderInput(
             "deg_free", 
             label = "Spline degrees of freedom:",
             min = 3L, value = 3L, max = 8L, step = 1L
           )
    ),
    
    imageOutput("spline_contours")
  )
)

server <- function(input, output, session) {
  
  # ------------------------------------------------------------------------
  # Input data from remote locations on GitHub
  
  pred_path <-                                              
    paste(                                                  
      "https://raw.githubusercontent.com",                  
      "topepo", "shinylive-in-book-test",                   
      "main", "predicted_values.RData",                     
      sep = "/"                                             
    )                                                       
  data_path <-                                              
    paste(                                                  
      "https://raw.githubusercontent.com",                  
      "topepo", "shinylive-in-book-test",                   
      "main", "sim_val.RData",                              
      sep = "/"                                             
    )                                                       
  
  rdata_file <- tempfile()                                  
  download.file(pred_path, destfile = rdata_file)           
  load(rdata_file)                                          
  download.file(data_path, destfile = rdata_file)           
  load(rdata_file)                                          
  
  # Set some ranges for the plot
  rngs <- list(A = c(-3.3, 3.3), B = c(-4.4, 4.4))
  
  output$spline_contours <-
    renderImage({
      
      preds <- predicted_values[predicted_values$deg_free == input$deg_free,]
      
      p <-
        ggplot(preds, aes(A, B)) +
        # Plot the validation set
        geom_point(
          data = sim_val, 
          aes(col = class, pch = class), 
          alpha = 1 / 2,
          cex = 3
        ) +
        # Show the class boundary
        geom_contour(
          aes(z = .pred_one),
          breaks = 1 / 2,
          linewidth = 3 / 2,
          col = "black"
        ) +
        # Formatting
        lims(x = rngs$A, y = rngs$B) +
        theme_bw() + 
        theme(legend.position = "top")
      
      file <- 
        htmltools::capturePlot(
          print(p), 
          tempfile(fileext = ".svg"),
          grDevices::svg,
          width = 4, 
          height = 4
        )
      list(src = file)
    }, 
    deleteFile = TRUE)               
}

app <- shinyApp(ui = ui, server = server)
```
:::

A visualization of the class boundary for different numbers of degrees of freedom for natural spline features in `A` and `B`.  

:::

You can reference @fig-shiny-spline in the usual way (via `@fig-shiny-spline`). 


## Making the shiny app a figure 

As previously mentioned, following the usual convention of using a `fig-` prefix for a chunk will not make the `shiny` app a figure. However, the [1.4 release of Quarto](https://quarto.org/docs/prerelease/1.4/crossref.html#crossreferenceable-elements-take-arbitrary-content) (pre-release version as of this writing) has a new feature to make anything a specific type of content (such as a figure). 

We use the `:::` syntax to declare the figure and any critical options. In my case above, this was  

````md
::: {#fig-shiny-spline}

::: {.figure-content}

```{shinylive-r}
#| label: fig-shiny-spline
#| viewerHeight: 500
#| standalone: true

<-- my shiny app code here-->

app <- shinyApp(ui = ui, server = server)
```
:::

A visualization of the class boundary for different numbers of degrees of 
freedom for natural spline features in `A` and `B`.   

:::
````

You probably don't have to use the same chunk name (`{#fig-shiny-spline}`) in two places; this is the more important place to specify it. I like having them the same. 