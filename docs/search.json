[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "shinylive-in-book-test",
    "section": "",
    "text": "Preface\nFor writing online books (with Quarto), I’d like to be able to demonstrate concepts and results dynamically. To some extent, we can do this with gganimate, but it is very limiting.\nWe’d like to use shiny. At the 2023 posit conference, Joe Cheng unveiled shinylive-r, a tool to embed R and shiny into a webpage using WebAssembly (aka Wasm) using webR.\nThis repo is a work in progress since we (Posit) have not fully worked out all of the details (as of today: 2023-09-26). Also, initial testing will allow developers to make APIs to make things more easy to use.\nThe example use case that I’ll use to test is to show how natural splines can affect the classification boundaries produced via logistic regression. Using a simulated data set, we want to show the resulting class boundary curve for a given number of degrees of freedom for the splines. The user should be able to modify these and see the results.\nThe next “chapter” has code to pre-compute the results instead of doing them in shiny (which might be too time-consuming). You can skip that if you are not interested; we generate a validation set of data points (sim_val) to plot and a data frame of predictions that are used to compute the class boundaries using a contour plot (predicted_values). These are the main inputs in the shiny app.\nThe third chapter is about the shiny app.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html#code-to-pre-compute-grids",
    "href": "intro.html#code-to-pre-compute-grids",
    "title": "1  Adding interactivity for teaching",
    "section": "1.1 Code to pre-compute grids",
    "text": "1.1 Code to pre-compute grids\nThe idea is to make a regular grid of values and precompute predictions on a data grid. These values are filtered in the shiny app, and the decision boundary can be computed using a contour plot.\nWe’ll use tidymodels. First, let’s load packages then simulate some data:\n\nlibrary(tidymodels)\nlibrary(shiny)\n\n# ------------------------------------------------------------------------------\n\ntidymodels_prefer()\ntheme_set(theme_bw())\noptions(pillar.advice = FALSE, pillar.min_title_chars = Inf)\n\n# ------------------------------------------------------------------------------\n\nf &lt;- expr(-1 - 4 * A - 2 * B - 0.2 * A^2 + 1 * B^2)\n\nset.seed(943)\nsim_tr  &lt;- sim_logistic(500, f)\nsim_val &lt;- sim_logistic(300, f)\n\nsave(sim_val, file = \"sim_val.RData\")\n\n## Make a data grid and get its ranges\n\nsize &lt;- 100\nx_seq &lt;- seq(-4, 4, length.out = size)\npred_grid &lt;- crossing(A = seq(-3, 3, length.out = size), B = x_seq)\n\nrngs &lt;- map(pred_grid, extendrange)\n\nLet’s try a logistic regression with spline terms for both predictors (equal degrees of freedom):\n\nmodel_spec &lt;- logistic_reg()\nmodel_rec &lt;- \n  recipe(class ~ ., data = sim_tr) %&gt;% \n  step_spline_b(A, B, deg_free = tune())\nmodel_wflow &lt;- workflow(model_rec, model_spec)\n\nNow we will pre-compute the predictions for each model configuration:\n\nparam_grid &lt;- tibble(deg_free = 3:8)\n\n# This will produce predictions on the grid and save them and the original data\nget_grid_pred &lt;- function(x) {\n  augment(x, new_data = pred_grid)\n}\n\nctrl &lt;- control_grid(extract = get_grid_pred)\n\nmodel_res &lt;- \n  model_wflow %&gt;% \n  tune_grid(resamples = apparent(sim_tr), grid = param_grid, control = ctrl)\n\n# pull out and format the predictions\npredicted_values &lt;- \n  model_res %&gt;% \n  collect_extracts() %&gt;% \n  dplyr::select(deg_free, .extracts) %&gt;% \n  unnest(.extracts) %&gt;% \n  dplyr::select(-.pred_class, -.pred_two)\n\nif (!exists(\"predicted_values.RData\")) {\n  save(predicted_values, file = \"predicted_values.RData\")\n}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Adding interactivity for teaching</span>"
    ]
  },
  {
    "objectID": "intro.html#shinylive",
    "href": "intro.html#shinylive",
    "title": "1  Adding interactivity for teaching",
    "section": "1.2 shiny(live)!",
    "text": "1.2 shiny(live)!\nHere are the results:\n#| label: fig-shiny-spline\n#| viewerHeight: 500\n#| standalone: true\n\nwebr::install(\"ggplot2\")\nwebr::install(\"dplyr\")\n\nui &lt;- fluidPage(\n  \n  fluidRow(\n    column(8, \n           sliderInput(\n             \"deg_free\", \n             label = \"Spline degrees of freedom:\",\n             min = 3L, value = 3L, max = 8L, step = 1L\n           )\n    ),\n    \n    plotOutput(\"spline_contours\", height = \"400px\")\n  )\n)\n\nserver &lt;- function(input, output) {\n\n  library(ggplot2)\n  library(dplyr)\n  \n  # ------------------------------------------------------------------------\n  # Input data from remote locations\n  \n  rdata_file &lt;- tempfile()\n  download.file(\n    \"https://raw.githubusercontent.com/topepo/shinylive-in-book-test/main/predicted_values.RData\",\n    destfile = rdata_file)\n  load(rdata_file)\n  download.file(\n    \"https://raw.githubusercontent.com/topepo/shinylive-in-book-test/main/sim_val.RData\",\n    destfile = rdata_file)\n  load(rdata_file)\n  \n  rngs &lt;- list(A = c(-3.3, 3.3), B = c(-4.4, 4.4))\n\n  output$spline_contours &lt;-\n    renderPlot({\n\n      preds &lt;- dplyr::filter(predicted_values, deg_free == input$deg_free)\n\n      p &lt;-\n        preds %&gt;%\n        ggplot(aes(A, B)) +\n        geom_point(data = sim_val, aes(col = class, pch = class), alpha = 1 / 2) +\n        geom_contour(\n          aes(z = .pred_one),\n          breaks = 1/ 2,\n          col = \"black\"\n        ) +\n        lims(x = rngs$A, y = rngs$B) +\n        theme_bw() + \n        theme(legend.position = \"top\")\n\n      print(p)\n\n    },\n    width = 400, height = 400, res = 100)\n}\n\napp &lt;- shinyApp(ui = ui, server = server)\nThe shiny code is very simple.\nI’d like to be able to use these as Quarto figures (I used a figure-type chunk).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Adding interactivity for teaching</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "index.html#software",
    "href": "index.html#software",
    "title": "shinylive-in-book-test",
    "section": "Software",
    "text": "Software\nI used a recent version of R (R version 4.3.1 (2023-06-16)), the latest daily release of the RStudio IDE, and the latest quarto (version 1.4.376).\nI installed the shinylive Quarto extension:\nshell&gt; quarto add quarto-ext/shinylive\nand also the corresponding R package (I suggest using R’s pak package):\nR&gt; pak::pak(\"posit-dev/r-shinylive\")\nVersions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Monterey 12.6.9\n system   x86_64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/New_York\n date     2023-09-26\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.1   2023-03-23 [1] CRAN (R 4.3.0)\n colorspace    2.1-0   2023-01-23 [1] CRAN (R 4.3.0)\n digest        0.6.33  2023-07-07 [1] CRAN (R 4.3.0)\n dplyr         1.1.2   2023-04-20 [1] CRAN (R 4.3.0)\n evaluate      0.21    2023-05-05 [1] CRAN (R 4.3.0)\n fansi         1.0.4   2023-01-22 [1] CRAN (R 4.3.0)\n fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.3.0)\n generics      0.1.3   2022-07-05 [1] CRAN (R 4.3.0)\n ggplot2     * 3.4.3   2023-08-14 [1] CRAN (R 4.3.0)\n glue          1.6.2   2022-02-24 [1] CRAN (R 4.3.0)\n gtable        0.3.3   2023-03-21 [1] CRAN (R 4.3.0)\n htmltools     0.5.5   2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2   2023-03-17 [1] CRAN (R 4.3.0)\n jsonlite      1.8.7   2023-06-29 [1] CRAN (R 4.3.0)\n knitr         1.43    2023-05-25 [1] CRAN (R 4.3.0)\n lifecycle     1.0.3   2022-10-07 [1] CRAN (R 4.3.0)\n lubridate   * 1.9.2   2023-02-10 [1] CRAN (R 4.3.0)\n magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.3.0)\n munsell       0.5.0   2018-06-12 [1] CRAN (R 4.3.0)\n pillar        1.9.0   2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.3.0)\n R6            2.5.1   2021-08-19 [1] CRAN (R 4.3.0)\n rlang         1.1.1   2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.23    2023-07-01 [1] CRAN (R 4.3.0)\n rstudioapi    0.15.0  2023-07-07 [1] CRAN (R 4.3.0)\n scales        1.2.1   2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)\n shinylive   * 0.1.0   2023-09-25 [1] Github (posit-dev/r-shinylive@77c775a)\n tibble        3.2.1   2023-03-20 [1] CRAN (R 4.3.0)\n tidyselect    1.2.0   2022-10-10 [1] CRAN (R 4.3.0)\n timechange    0.2.0   2023-01-11 [1] CRAN (R 4.3.0)\n utf8          1.2.3   2023-01-31 [1] CRAN (R 4.3.0)\n vctrs         0.6.3   2023-06-14 [1] CRAN (R 4.3.0)\n withr         2.5.0   2022-03-03 [1] CRAN (R 4.3.0)\n xfun          0.39    2023-04-20 [1] CRAN (R 4.3.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] /Users/max/Library/R/x86_64/4.3/library\n [2] /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  shiny(live)!",
    "section": "",
    "text": "Here are the results:\n\n\n\n\n#| label: fig-shiny-spline\n#| viewerHeight: 500\n#| standalone: true\n\nwebr::install(\"ggplot2\")\nwebr::install(\"dplyr\")\n\nui &lt;- fluidPage(\n  \n  fluidRow(\n    column(8, \n           sliderInput(\n             \"deg_free\", \n             label = \"Spline degrees of freedom:\",\n             min = 3L, value = 3L, max = 8L, step = 1L\n           )\n    ),\n    \n    plotOutput(\"spline_contours\", height = \"400px\")\n  )\n)\n\nserver &lt;- function(input, output) {\n\n  library(ggplot2)\n  library(dplyr)\n  \n  # ------------------------------------------------------------------------\n  # Input data from remote locations\n  \n  rdata_file &lt;- tempfile()\n  download.file(\n    \"https://raw.githubusercontent.com/topepo/shinylive-in-book-test/main/predicted_values.RData\",\n    destfile = rdata_file)\n  load(rdata_file)\n  download.file(\n    \"https://raw.githubusercontent.com/topepo/shinylive-in-book-test/main/sim_val.RData\",\n    destfile = rdata_file)\n  load(rdata_file)\n  \n  rngs &lt;- list(A = c(-3.3, 3.3), B = c(-4.4, 4.4))\n\n  output$spline_contours &lt;-\n    renderPlot({\n\n      preds &lt;- dplyr::filter(predicted_values, deg_free == input$deg_free)\n\n      p &lt;-\n        preds %&gt;%\n        ggplot(aes(A, B)) +\n        geom_point(data = sim_val, aes(col = class, pch = class), alpha = 1 / 2) +\n        geom_contour(\n          aes(z = .pred_one),\n          breaks = 1/ 2,\n          col = \"black\"\n        ) +\n        lims(x = rngs$A, y = rngs$B) +\n        theme_bw() + \n        theme(legend.position = \"top\")\n\n      print(p)\n\n    },\n    width = 400, height = 400, res = 100)\n}\n\napp &lt;- shinyApp(ui = ui, server = server)\n\n\n\nFigure 2.1: A visualization of the class boundary for different number of degrees of freedom for natrual spline features in A and B.\n\n\n\nThe shiny code is very simple.\nI’d like to be able to use these as Quarto figures (I used a figure-type chunk).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Adding interactivity for teaching</span>"
    ]
  },
  {
    "objectID": "generate-data.html",
    "href": "generate-data.html",
    "title": "1  Creating the data for the app",
    "section": "",
    "text": "The idea is to make a regular grid of values and precompute predictions on a data grid. These values are filtered in the shiny app, and the decision boundary can be computed using a contour plot.\nWe’ll use tidymodels. First, let’s load packages and set some options:\n\nlibrary(tidymodels)\n# Also requires the splines2 package to be installed.\n\nHere are some options that I set. The first line is probably the most important.\n\ntidymodels_prefer()\ntheme_set(theme_bw())\noptions(pillar.advice = FALSE, pillar.min_title_chars = Inf)\n\nWe can simulate data using tidymodels functions from the modeldata package:\n\nf &lt;- expr(-1 - 4 * A - 2 * B - 0.2 * A^2 + 1 * B^2)\n\nset.seed(943)\nsim_tr  &lt;- sim_logistic(500, f)\nsim_val &lt;- sim_logistic(300, f)\n\nprint(sim_val, n = 5)\n\n# A tibble: 300 × 3\n       A       B class\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;\n1  0.325 -0.398  two  \n2 -2.69  -0.0649 one  \n3  0.749 -0.675  two  \n4  0.259  0.553  two  \n5  1.37   1.34   two  \n# ℹ 295 more rows\n\n## Make a data grid and get its ranges\nsize &lt;- 100\nx_seq &lt;- seq(-4, 4, length.out = size)\npred_grid &lt;- crossing(A = seq(-3, 3, length.out = size), B = x_seq)\n\nLet’s try a logistic regression with spline terms for both predictors (equal degrees of freedom):\n\nmodel_spec &lt;- logistic_reg()\nmodel_rec &lt;- \n  recipe(class ~ ., data = sim_tr) %&gt;% \n  step_spline_natural(A, B, deg_free = tune())\nmodel_wflow &lt;- workflow(model_rec, model_spec)\n\nNow we will pre-compute the predictions for each model configuration:\n\nparam_grid &lt;- tibble(deg_free = 3:8)\n\n# This will produce predictions on the grid and save them and the original data\nget_grid_pred &lt;- function(x) {\n  augment(x, new_data = pred_grid)\n}\n\nctrl &lt;- control_grid(extract = get_grid_pred)\n\nmodel_res &lt;- \n  model_wflow %&gt;% \n  tune_grid(resamples = apparent(sim_tr), grid = param_grid, control = ctrl)\n\n# pull out and format the predictions\npredicted_values &lt;- \n  model_res %&gt;% \n  collect_extracts() %&gt;% \n  dplyr::select(deg_free, .extracts) %&gt;% \n  unnest(.extracts) %&gt;% \n  dplyr::select(-.pred_class, -.pred_two)\n\nprint(predicted_values, n = 5)\n\n# A tibble: 60,000 × 4\n  deg_free     A     B .pred_one\n     &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1        3    -3 -4            1\n2        3    -3 -3.92         1\n3        3    -3 -3.84         1\n4        3    -3 -3.76         1\n5        3    -3 -3.68         1\n# ℹ 59,995 more rows\n\n\nThe shiny app will not have automatic access to any of the objects in our R workspace. We’ll need to load the data into our shiny app, so we’ll have to download them when it starts.\nTo do this, we’ll save the files. Since I’m using a GitHub repository, these will be available online via a URL.\n\nsave(sim_val, file = \"sim_val.RData\")\nsave(predicted_values, file = \"predicted_values.RData\")\n\nHowever, security is important for webR, and not all programmatic techniques to load/upload data into our app will work. From one of our developers:\n\nBecause webR runs in the browser, it’s subject to the browser’s security restrictions. As such, downloading data from cross-origin sources is restricted by the CORS mechanism. The browser will only download data from web servers that permit it to do so by including the relevant HTTP headers in its responses.\n\nThis is why using URLs from github.com do not work, but ones from raw.githubusercontent.com can be used. For my repo, we can use something like:\n\nuser &lt;- \"topepo\"\nrepo &lt;- \"shinylive-in-book-test\"\nfile &lt;- \"predicted_values.RData\"\nglue::glue(\"https://raw.githubusercontent.com/{user}/{repo}/main/{file}\")\n\nThat’s how we will upload our data into the app.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Creating the data for the app</span>"
    ]
  },
  {
    "objectID": "index.html#unfinished",
    "href": "index.html#unfinished",
    "title": "shinylive-in-book-test",
    "section": "Unfinished",
    "text": "Unfinished\nThings to still figure out\n\nGet quarto to recogize the shiny app as a figure",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "shiny.html",
    "href": "shiny.html",
    "title": "2  shiny(live)!",
    "section": "",
    "text": "The Quarto doc will contain the shiny app using a code chunk. The main requirements are the options\n#| label: fig-shiny-spline\n#| standalone: true\nYou will also have to add a Quarto filter in your _quarto.yml file:\nfilters:\n  - shinylive\nThere is a bit more to say about formatting the chink for Quarto but we’ll show that later.\nLet’s look at the shiny code inside our fig-shiny-spline chunk. First, the first few lines should install packages that we need (besides shiny):\n\nwebr::install(\"ggplot2\")\nwebr::install(\"dplyr\")\n\nThere is no CRAN pckage called webr so don’t worry about installing that.\nThe UI function is very simple:\n\nui &lt;- fluidPage(\n  \n  fluidRow(\n    column(8, \n           sliderInput(\n             \"deg_free\", \n             label = \"Spline degrees of freedom:\",\n             min = 3L, value = 3L, max = 8L, step = 1L\n           )\n    ),\n    \n    plotOutput(\"spline_contours\", height = \"400px\")\n  )\n)\n\nHere are the results:\n\n\n\n\n#| label: fig-shiny-spline\n#| viewerHeight: 500\n#| standalone: true\n\nwebr::install(\"ggplot2\")\nwebr::install(\"dplyr\")\n\nui &lt;- fluidPage(\n  \n  fluidRow(\n    column(8, \n           sliderInput(\n             \"deg_free\", \n             label = \"Spline degrees of freedom:\",\n             min = 3L, value = 3L, max = 8L, step = 1L\n           )\n    ),\n    \n    plotOutput(\"spline_contours\", height = \"400px\")\n  )\n)\n\nserver &lt;- function(input, output) {\n\n  library(ggplot2)\n  library(dplyr)\n  \n  # ------------------------------------------------------------------------\n  # Input data from remote locations\n  \n  rdata_file &lt;- tempfile()\n  download.file(\n    \"https://raw.githubusercontent.com/topepo/shinylive-in-book-test/main/predicted_values.RData\",\n    destfile = rdata_file)\n  load(rdata_file)\n  download.file(\n    \"https://raw.githubusercontent.com/topepo/shinylive-in-book-test/main/sim_val.RData\",\n    destfile = rdata_file)\n  load(rdata_file)\n  \n  rngs &lt;- list(A = c(-3.3, 3.3), B = c(-4.4, 4.4))\n\n  output$spline_contours &lt;-\n    renderPlot({\n\n      preds &lt;- dplyr::filter(predicted_values, deg_free == input$deg_free)\n\n      p &lt;-\n        preds %&gt;%\n        ggplot(aes(A, B)) +\n        geom_point(data = sim_val, aes(col = class, pch = class), alpha = 1 / 2) +\n        geom_contour(\n          aes(z = .pred_one),\n          breaks = 1/ 2,\n          col = \"black\"\n        ) +\n        lims(x = rngs$A, y = rngs$B) +\n        theme_bw() + \n        theme(legend.position = \"top\")\n\n      print(p)\n\n    },\n    width = 400, height = 400, res = 100)\n}\n\napp &lt;- shinyApp(ui = ui, server = server)\n\n\n\nFigure 2.1: A visualization of the class boundary for different number of degrees of freedom for natrual spline features in A and B.\n\n\n\nThe shiny code is very simple.\nI’d like to be able to use these as Quarto figures (I used a figure-type chunk).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>shiny(live)!</span>"
    ]
  },
  {
    "objectID": "shiny.html#user-interface-function",
    "href": "shiny.html#user-interface-function",
    "title": "2  shiny(live)!",
    "section": "2.3 User-interface function",
    "text": "2.3 User-interface function\nThe UI function is very simple and has no extra accouterments for shinylive\n\nui &lt;- fluidPage(\n  \n  fluidRow(\n    column(8, \n           sliderInput(\n             \"deg_free\", \n             label = \"Spline degrees of freedom:\",\n             min = 3L, value = 3L, max = 8L, step = 1L\n           )\n    ),\n    \n    imageOutput(\"spline_contours\", height = \"400px\")\n  )\n)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>shiny(live)!</span>"
    ]
  },
  {
    "objectID": "shiny.html#yml-options",
    "href": "shiny.html#yml-options",
    "title": "2  shiny(live)!",
    "section": "2.1 yml options",
    "text": "2.1 yml options\nThe main requirement for the code chunk yml is the option standalone: true.\nFor my application, I used the options:\n```{shinylive-r}\n#| label: fig-shiny-spline\n#| viewerHeight: 500\n#| standalone: true\nThe label doesn’t make it a figure as it normally would but see the section below for details regarding this (and details like captions, etc.).\nThe standard fig-height (and width) options don’t apply to shiny apps; viewerHeight is used instead.\nYou also have to add a Quarto filter in your _quarto.yml file:\nfilters:\n  - shinylive\nThere is a bit more to say about formatting the chunk for Quarto but we’ll show that later.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>shiny(live)!</span>"
    ]
  },
  {
    "objectID": "shiny.html#the-server-function",
    "href": "shiny.html#the-server-function",
    "title": "2  shiny(live)!",
    "section": "2.4 The server function",
    "text": "2.4 The server function\nThis is where most of the customization happens.\n\nserver &lt;- function(input, output, session) {\n  \n  # ------------------------------------------------------------------------\n  # Input data from remote locations on GitHub\n  \n1  pred_path &lt;-\n    paste(                                                  \n      \"https://raw.githubusercontent.com\",                  \n      \"topepo\", \"shinylive-in-book-test\",                   \n      \"main\", \"predicted_values.RData\",                     \n      sep = \"/\"                                             \n    )                                                       \n  data_path &lt;-                                              \n    paste(                                                  \n      \"https://raw.githubusercontent.com\",                  \n      \"topepo\", \"shinylive-in-book-test\",                   \n      \"main\", \"sim_val.RData\",                              \n      sep = \"/\"                                             \n    )                                                       \n  \n2  rdata_file &lt;- tempfile()\n  download.file(pred_path, destfile = rdata_file)           \n  load(rdata_file)                                          \n  download.file(data_path, destfile = rdata_file)           \n  load(rdata_file)                                          \n  \n  # Set some ranges for the plot\n  rngs &lt;- list(A = c(-3.3, 3.3), B = c(-4.4, 4.4))\n  \n  output$spline_contours &lt;-\n    renderImage({\n      \n      preds &lt;- predicted_values[predicted_values$deg_free == input$deg_free,]\n      \n      p &lt;-\n        ggplot(preds, aes(A, B)) +\n        # Plot the validation set\n        geom_point(\n          data = sim_val, \n          aes(col = class, pch = class), \n          alpha = 1 / 2,\n          cex = 3\n        ) +\n        # Show the class boundary\n        geom_contour(\n          aes(z = .pred_one),\n          breaks = 1 / 2,\n          linewidth = 3 / 2,\n          col = \"black\"\n        ) +\n        # Formatting\n        lims(x = rngs$A, y = rngs$B) +\n        theme_bw() + \n        theme(legend.position = \"top\")\n      \n3      file &lt;-\n        htmltools::capturePlot(\n          print(p), \n          tempfile(fileext = \".svg\"),\n          grDevices::svg,\n          width = 4, \n          height = 4\n        )\n      list(src = file)\n    }, \n4    deleteFile = TRUE)\n}\n\napp &lt;- shinyApp(ui = ui, server = server)\n\n\n1\n\nThis block sets up URLs pointing to the GitHub raw objects.\n\n2\n\nBoth data sets are downloaded to a temporary file and loaded into the session.\n\n3\n\nCode allowing us to save the visualization as an SVG image. This is an aesthetic choice and unrelated to the point of this repo.\n\n4\n\nClean up the SVG file passed between the server and UI.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>shiny(live)!</span>"
    ]
  },
  {
    "objectID": "shiny.html#making-the-shiny-app-a-figure",
    "href": "shiny.html#making-the-shiny-app-a-figure",
    "title": "2  shiny(live)!",
    "section": "2.6 Making the shiny app a figure",
    "text": "2.6 Making the shiny app a figure\nAs previously mentioned, following the usual convention of using a fig- prefix for a chunk will not make the shiny app a figure. However, the 1.4 release of Quarto (pre-release version as of this writing) has a new feature to make anything a specific type of content (such as a figure).\nWe use the ::: syntax to declare the figure and any critical options. In my case above, this was\n::: {#fig-shiny-spline}\n\n::: {.figure-content}\n\n```{shinylive-r}\n#| label: fig-shiny-spline\n#| viewerHeight: 500\n#| standalone: true\n\n&lt;-- my shiny app code here--&gt;\n\napp &lt;- shinyApp(ui = ui, server = server)\n```\n:::\n\nA visualization of the class boundary for different numbers of degrees of \nfreedom for natural spline features in `A` and `B`.   \n\n:::\nYou probably don’t have to use the same chunk name ({#fig-shiny-spline}) in two places; this is the more important place to specify it. I like having them the same.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>shiny(live)!</span>"
    ]
  },
  {
    "objectID": "shiny.html#package-declarations",
    "href": "shiny.html#package-declarations",
    "title": "2  shiny(live)!",
    "section": "2.2 Package declarations",
    "text": "2.2 Package declarations\nIn our chunk that contains the shiny app (i.e., fig-shiny-spline in this example), let’s make sure to install packages that we need (besides shiny):\n\nwebr::install(\"ggplot2\")\nwebr::install(\"htmltools\")   #&lt;- only needed to use SVG images \n\nThe base installation of webR includes its own webr utility package, so don’t worry about installing that.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>shiny(live)!</span>"
    ]
  },
  {
    "objectID": "shiny.html#the-results",
    "href": "shiny.html#the-results",
    "title": "2  shiny(live)!",
    "section": "2.5 The results",
    "text": "2.5 The results\nOur beautiful shiny app!\n\n\n\n\n#| label: fig-shiny-spline\n#| viewerHeight: 505\n#| standalone: true\nwebr::install(\"ggplot2\")\nwebr::install(\"htmltools\")\n\nlibrary(ggplot2)\nlibrary(htmltools)\n\nui &lt;- fluidPage(\n  \n  fluidRow(\n    column(8, \n           sliderInput(\n             \"deg_free\", \n             label = \"Spline degrees of freedom:\",\n             min = 3L, value = 3L, max = 8L, step = 1L\n           )\n    ),\n    \n    imageOutput(\"spline_contours\")\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # ------------------------------------------------------------------------\n  # Input data from remote locations on GitHub\n  \n  pred_path &lt;-                                              \n    paste(                                                  \n      \"https://raw.githubusercontent.com\",                  \n      \"topepo\", \"shinylive-in-book-test\",                   \n      \"main\", \"predicted_values.RData\",                     \n      sep = \"/\"                                             \n    )                                                       \n  data_path &lt;-                                              \n    paste(                                                  \n      \"https://raw.githubusercontent.com\",                  \n      \"topepo\", \"shinylive-in-book-test\",                   \n      \"main\", \"sim_val.RData\",                              \n      sep = \"/\"                                             \n    )                                                       \n  \n  rdata_file &lt;- tempfile()                                  \n  download.file(pred_path, destfile = rdata_file)           \n  load(rdata_file)                                          \n  download.file(data_path, destfile = rdata_file)           \n  load(rdata_file)                                          \n  \n  # Set some ranges for the plot\n  rngs &lt;- list(A = c(-3.3, 3.3), B = c(-4.4, 4.4))\n  \n  output$spline_contours &lt;-\n    renderImage({\n      \n      preds &lt;- predicted_values[predicted_values$deg_free == input$deg_free,]\n      \n      p &lt;-\n        ggplot(preds, aes(A, B)) +\n        # Plot the validation set\n        geom_point(\n          data = sim_val, \n          aes(col = class, pch = class), \n          alpha = 1 / 2,\n          cex = 3\n        ) +\n        # Show the class boundary\n        geom_contour(\n          aes(z = .pred_one),\n          breaks = 1 / 2,\n          linewidth = 3 / 2,\n          col = \"black\"\n        ) +\n        # Formatting\n        lims(x = rngs$A, y = rngs$B) +\n        theme_bw() + \n        theme(legend.position = \"top\")\n      \n      file &lt;- \n        htmltools::capturePlot(\n          print(p), \n          tempfile(fileext = \".svg\"),\n          grDevices::svg,\n          width = 4, \n          height = 4\n        )\n      list(src = file)\n    }, \n    deleteFile = TRUE)               \n}\n\napp &lt;- shinyApp(ui = ui, server = server)\n\n\n\nFigure 2.1: A visualization of the class boundary for different numbers of degrees of freedom for natural spline features in A and B.\n\n\n\nYou can reference Figure 2.1 in the usual way (via @fig-shiny-spline).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>shiny(live)!</span>"
    ]
  },
  {
    "objectID": "index.html#thanks",
    "href": "index.html#thanks",
    "title": "shinylive-in-book-test",
    "section": "Thanks",
    "text": "Thanks\nThanks to George Stagg, Joe Cheng, Winston Chang, and everyone else who made webR and shinylive happen.",
    "crumbs": [
      "Preface"
    ]
  }
]