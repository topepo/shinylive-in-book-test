[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "shinylive-in-book-test",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html#code-to-pre-compute-grids",
    "href": "intro.html#code-to-pre-compute-grids",
    "title": "1  Adding interactivity for teaching",
    "section": "1.1 Code to pre-compute grids",
    "text": "1.1 Code to pre-compute grids\nThe idea is to make a regular grid of values and precompute predictions on a data grid. These values are filtered in the shiny app, and the decision boundary can be computed using a contour plot.\nWe’ll use tidymodels. First, let’s load packages then simulate some data:\n\nlibrary(tidymodels)\nlibrary(shiny)\n\n# ------------------------------------------------------------------------------\n\ntidymodels_prefer()\ntheme_set(theme_bw())\noptions(pillar.advice = FALSE, pillar.min_title_chars = Inf)\n\n# ------------------------------------------------------------------------------\n\nf &lt;- expr(-1 - 4 * A - 2 * B - 0.2 * A^2 + 1 * B^2)\n\nset.seed(943)\nsim_tr  &lt;- sim_logistic(500, f)\nsim_val &lt;- sim_logistic(300, f)\n\nsave(sim_val, file = \"sim_val.RData\")\n\n## Make a data grid and get its ranges\n\nsize &lt;- 100\nx_seq &lt;- seq(-4, 4, length.out = size)\npred_grid &lt;- crossing(A = seq(-3, 3, length.out = size), B = x_seq)\n\nrngs &lt;- map(pred_grid, extendrange)\n\nLet’s try a logistic regression with spline terms for both predictors (equal degrees of freedom):\n\nmodel_spec &lt;- logistic_reg()\nmodel_rec &lt;- \n  recipe(class ~ ., data = sim_tr) %&gt;% \n  step_spline_b(A, B, deg_free = tune())\nmodel_wflow &lt;- workflow(model_rec, model_spec)\n\nNow we will pre-compute the predictions for each model configuration:\n\nparam_grid &lt;- tibble(deg_free = 3:8)\n\n# This will produce predictions on the grid and save them and the original data\nget_grid_pred &lt;- function(x) {\n  augment(x, new_data = pred_grid)\n}\n\nctrl &lt;- control_grid(extract = get_grid_pred)\n\ngrid_pred &lt;- \n  model_wflow %&gt;% \n  tune_grid(resamples = apparent(sim_tr), grid = param_grid, control = ctrl)\n\n# pull out and format the predictions\ngrid_pred &lt;- \n  collect_extracts(grid_pred) %&gt;% \n  dplyr::select(deg_free, .extracts) %&gt;% \n  unnest(.extracts) %&gt;% \n  dplyr::select(-.pred_class, -.pred_two)\n\nif (!exists(\"grid_pred.RData\")) {\n  save(grid_pred, file = \"grid_pred.RData\")\n}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Adding interactivity for teaching</span>"
    ]
  },
  {
    "objectID": "intro.html#shinylive",
    "href": "intro.html#shinylive",
    "title": "1  Adding interactivity for teaching",
    "section": "1.2 shiny(live)!",
    "text": "1.2 shiny(live)!\nHere are the results:\n#| label: fig-shiny-spline\n#| viewerHeight: 500\n#| standalone: true\n\nwebr::install(\"ggplot2\")\nwebr::install(\"dplyr\")\n\nui &lt;- fluidPage(\n  \n  fluidRow(\n    column(8, \n           sliderInput(\n             \"deg_free\", \n             label = \"Spline degrees of freedom:\",\n             min = 3L, value = 3L, max = 8L, step = 1L\n           )\n    ),\n    \n    plotOutput(\"spline_contours\", height = \"400px\")\n  )\n)\n\nserver &lt;- function(input, output) {\n\n  library(ggplot2)\n  library(dplyr)\n  \n  # ------------------------------------------------------------------------\n  # Input data from remote locations\n  \n  rdata_file &lt;- tempfile()\n  download.file(\n    \"https://raw.githubusercontent.com/topepo/shinylive-in-book-test/main/grid_pred.RData\",\n    destfile = rdata_file)\n  load(rdata_file)\n  download.file(\n    \"https://raw.githubusercontent.com/topepo/shinylive-in-book-test/main/sim_val.RData\",\n    destfile = rdata_file)\n  load(rdata_file)\n  \n  rngs &lt;- list(A = c(-3.3, 3.3), B = c(-4.4, 4.4))\n    \n  output$spline_dims &lt;- \n    renderPrint({\n      \n      preds &lt;- dplyr::filter(grid_pred, deg_free == input$deg_free)\n      cat(\"There were\", nrow(preds), \"in the filtered daa\\n.\")\n      \n    })\n  \n  output$spline_contours &lt;-\n    renderPlot({\n\n      preds &lt;- dplyr::filter(grid_pred, deg_free == input$deg_free)\n\n      p &lt;-\n        preds %&gt;%\n        ggplot(aes(A, B)) +\n        geom_point(data = sim_val, aes(col = class, pch = class), alpha = 1 / 2) +\n        geom_contour(\n          aes(z = .pred_one),\n          breaks = 1/ 2,\n          col = \"black\"\n        ) +\n        lims(x = rngs$A, y = rngs$B) +\n        theme_bw() + \n        theme(legend.position = \"top\")\n\n      print(p)\n\n    },\n    width = 400, height = 400, res = 100)\n}\n\napp &lt;- shinyApp(ui = ui, server = server)\nThe shiny code is very simple.\nI’d like to be able to use these as Quarto figures (I used a figure-type chunk).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Adding interactivity for teaching</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  }
]